#List tables in DB
dbListTables(conn)
### write a query that will fetch our data from prototable, the table where experiment data is being written to
query = "SELECT * FROM data_log"
results <- dbSendQuery(conn, query)
### this dataframe will contain all the experiment data
d<-dbFetch(results)
tmp <- subset(d, responses=='{"Age":"1","Gender":"1","Race":"1"}')
tmp2 <- as.vector(tmp$subjectID)
d<-d[!(d$subjectID %in% tmp2),]
# if they answer yes to EITHER survey question, they're eliminated
# first, isolate survey questions from data
d_numerosity <- subset(d, str_detect(stimLeft, "img/"))
#list of items that were wrong
d_wrong_list <- subset(d_numerosity, correct != 1)
d_wrong_subjects <- as.data.frame(table(d_wrong_list$subjectID))
d_wrong_subjects2 <- subset(d_wrong_subjects, Freq > 1)
# make all the subjects who were in the previous list...into a list
d_wrong_ID <- list(unique(d_wrong_list$subjectID))
# make lists out of the previously isolated subjects
tmp1<-as.integer(as.character((d_wrong_ID[[1]])))
#remove them
d_eliminated<-d[!(d$subjectID %in% tmp1),]
tmp1
#View(table(d$responses))
d_removed <- d_eliminated[!grepl("Consent", d_eliminated$responses),]
d_removed <- d_removed[!grepl("Age", d_removed$responses),]
d_removed <- d_removed[!grepl("You may like to", d_removed$stimulus),]
# anything containing "consent" in d$stimulus
# anything containing " " in d$ stimulus
#anything containing "Task" or "task" in d$stimulus
d_removed <- d_removed[!grepl("Task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("consent", d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$key_press),]
d <- clean_names(d_removed)
d$condition <- d$condition_proto
keep <- c("subject_id","condition","background", "stimulus", "key_press", "trial_index", "stim_left", "stim_right")
d <- d[keep]
for (i in 1:nrow(d)) {
if (is.na(d$stim_left[i]) == TRUE) {
d$stim_left[i] = d$stimulus[i]
}
}
for (i in 1:nrow(d)) {
d$stimulus_cleaned[i] <- strsplit(d$stim_left[i], "/")[[1]][2]
d$stimulus_cleaned[i] <- strsplit(d$stimulus_cleaned[i], "\\.")[[1]][1]
}
d$stimulus <- d$stimulus_cleaned
# detect strings within the dataset, and marks things depending on which side was darker
# 1 = left side darker
# -1 = left side lighter
d_darkness <- d %>%
mutate(left_darkness = case_when(
# left was darker
str_detect(stimulus, "left") ~ 1,
str_detect(stimulus, "big") ~ 1,
# right was darker
str_detect(stimulus, "right") ~ -1,
str_detect(stimulus, "sm") ~ -1
))
d_darkness$key_press <- dplyr::recode(d_darkness$key_press, "37"="0", "39"="1")
d_correct_responses <- d_darkness %>%
mutate(response_darker = case_when(
(left_darkness == key_press) ~ 0,
(left_darkness != key_press) ~ 1
))
d_all <- d_correct_responses
mean(d_all$response_darker)
View(table(d_all$condition))
View(table(d_all$subject_id))
tmp <- subset(d_all, condition=="1")
View(table(tmp$subject_id))
tmp <- subset(d_all, condition=="0")
View(table(tmp$subject_id))
### load required packages
if(!"tidyverse" %in% (.packages())){require(tidyverse)}
if(!"RMariaDB" %in% (.packages())){require(RMariaDB)}
#Connecting to MySQL database on the WID server
conn <- dbConnect(MariaDB(), user = "graysquares-colormaps_op", password = "A7Frz8B5YMClvYfa", dbname = "graysquares-colormaps", host = "schlosslab-exp.wid.wisc.edu")
#List tables in DB
dbListTables(conn)
### write a query that will fetch our data from prototable, the table where experiment data is being written to
query = "SELECT * FROM data_log"
results <- dbSendQuery(conn, query)
### this dataframe will contain all the experiment data
d<-dbFetch(results)
tmp <- subset(d, responses=='{"Age":"1","Gender":"1","Race":"1"}')
tmp2 <- as.vector(tmp$subjectID)
d<-d[!(d$subjectID %in% tmp2),]
# if they answer yes to EITHER survey question, they're eliminated
# first, isolate survey questions from data
d_numerosity <- subset(d, str_detect(stimLeft, "img/"))
#list of items that were wrong
d_wrong_list <- subset(d_numerosity, correct != 1)
d_wrong_subjects <- as.data.frame(table(d_wrong_list$subjectID))
d_wrong_subjects2 <- subset(d_wrong_subjects, Freq > 1)
# make all the subjects who were in the previous list...into a list
d_wrong_ID <- list(unique(d_wrong_list$subjectID))
# make lists out of the previously isolated subjects
tmp1<-as.integer(as.character((d_wrong_ID[[1]])))
#remove them
d_eliminated<-d[!(d$subjectID %in% tmp1),]
```
tmp
tmp1
#View(table(d$responses))
d_removed <- d_eliminated[!grepl("Consent", d_eliminated$responses),]
d_removed <- d_removed[!grepl("Age", d_removed$responses),]
d_removed <- d_removed[!grepl("You may like to", d_removed$stimulus),]
# anything containing "consent" in d$stimulus
# anything containing " " in d$ stimulus
#anything containing "Task" or "task" in d$stimulus
d_removed <- d_removed[!grepl("Task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("consent", d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$key_press),]
d <- clean_names(d_removed)
d$condition <- d$condition_proto
keep <- c("subject_id","condition","background", "stimulus", "key_press", "trial_index", "stim_left", "stim_right")
d <- d[keep]
for (i in 1:nrow(d)) {
if (is.na(d$stim_left[i]) == TRUE) {
d$stim_left[i] = d$stimulus[i]
}
}
for (i in 1:nrow(d)) {
d$stimulus_cleaned[i] <- strsplit(d$stim_left[i], "/")[[1]][2]
d$stimulus_cleaned[i] <- strsplit(d$stimulus_cleaned[i], "\\.")[[1]][1]
}
for (i in 1:nrow(d)) {
d$stimulus_cleaned[i] <- strsplit(d$stim_left[i], "/")[[1]][2]
d$stimulus_cleaned[i] <- strsplit(d$stimulus_cleaned[i], "\\.")[[1]][1]
}
d$stimulus <- d$stimulus_cleaned
# detect strings within the dataset, and marks things depending on which side was darker
# 1 = left side darker
# -1 = left side lighter
d_darkness <- d %>%
mutate(left_darkness = case_when(
# left was darker
str_detect(stimulus, "left") ~ 1,
str_detect(stimulus, "big") ~ 1,
# right was darker
str_detect(stimulus, "right") ~ -1,
str_detect(stimulus, "sm") ~ -1
))
d_darkness$key_press <- dplyr::recode(d_darkness$key_press, "37"="0", "39"="1")
d_correct_responses <- d_darkness %>%
mutate(response_darker = case_when(
(left_darkness == key_press) ~ 0,
(left_darkness != key_press) ~ 1
))
d_all <- d_correct_responses
mean(d_all$response_darker)
View(table(d_all$condition))
tmp <- subset(d_all, condition=="0")
View(table(tmp$subject_id))
### load required packages
if(!"tidyverse" %in% (.packages())){require(tidyverse)}
if(!"RMariaDB" %in% (.packages())){require(RMariaDB)}
#Connecting to MySQL database on the WID server
conn <- dbConnect(MariaDB(), user = "graysquares-colormaps_op", password = "A7Frz8B5YMClvYfa", dbname = "graysquares-colormaps", host = "schlosslab-exp.wid.wisc.edu")
#List tables in DB
dbListTables(conn)
### write a query that will fetch our data from prototable, the table where experiment data is being written to
query = "SELECT * FROM data_log"
results <- dbSendQuery(conn, query)
### this dataframe will contain all the experiment data
d<-dbFetch(results)
tmp <- subset(d, responses=='{"Age":"1","Gender":"1","Race":"1"}')
tmp2 <- as.vector(tmp$subjectID)
d<-d[!(d$subjectID %in% tmp2),]
# if they answer yes to EITHER survey question, they're eliminated
# first, isolate survey questions from data
d_numerosity <- subset(d, str_detect(stimLeft, "img/"))
#list of items that were wrong
d_wrong_list <- subset(d_numerosity, correct != 1)
d_wrong_subjects <- as.data.frame(table(d_wrong_list$subjectID))
d_wrong_subjects2 <- subset(d_wrong_subjects, Freq > 1)
# make all the subjects who were in the previous list...into a list
d_wrong_ID <- list(unique(d_wrong_list$subjectID))
# make lists out of the previously isolated subjects
tmp1<-as.integer(as.character((d_wrong_ID[[1]])))
#remove them
d_eliminated<-d[!(d$subjectID %in% tmp1),]
#View(table(d$responses))
d_removed <- d_eliminated[!grepl("Consent", d_eliminated$responses),]
d_removed <- d_removed[!grepl("Age", d_removed$responses),]
d_removed <- d_removed[!grepl("You may like to", d_removed$stimulus),]
# anything containing "consent" in d$stimulus
# anything containing " " in d$ stimulus
#anything containing "Task" or "task" in d$stimulus
d_removed <- d_removed[!grepl("Task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("task", d_removed$stimulus),]
d_removed <- d_removed[!grepl("consent", d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$stimulus),]
d_removed <- d_removed[complete.cases(d_removed$key_press),]
d <- clean_names(d_removed)
d$condition <- d$condition_proto
keep <- c("subject_id","condition","background", "stimulus", "key_press", "trial_index", "stim_left", "stim_right")
d <- d[keep]
for (i in 1:nrow(d)) {
if (is.na(d$stim_left[i]) == TRUE) {
d$stim_left[i] = d$stimulus[i]
}
}
for (i in 1:nrow(d)) {
d$stimulus_cleaned[i] <- strsplit(d$stim_left[i], "/")[[1]][2]
d$stimulus_cleaned[i] <- strsplit(d$stimulus_cleaned[i], "\\.")[[1]][1]
}
d$stimulus <- d$stimulus_cleaned
# detect strings within the dataset, and marks things depending on which side was darker
# 1 = left side darker
# -1 = left side lighter
d_darkness <- d %>%
mutate(left_darkness = case_when(
# left was darker
str_detect(stimulus, "left") ~ 1,
str_detect(stimulus, "big") ~ 1,
# right was darker
str_detect(stimulus, "right") ~ -1,
str_detect(stimulus, "sm") ~ -1
))
d_darkness$key_press <- dplyr::recode(d_darkness$key_press, "37"="0", "39"="1")
d_correct_responses <- d_darkness %>%
mutate(response_darker = case_when(
(left_darkness == key_press) ~ 0,
(left_darkness != key_press) ~ 1
))
d_all <- d_correct_responses
mean(d_all$response_darker)
View(table(d_all$condition))
tmp <- subset(d_all, condition=="0")
View(table(tmp$subject_id))
#make json of validation triplets
# Generate all combinations of 3 from the vector
all_combinations <- combn(filenames2, 3)
#make json of hex code file names
filenames <- list.files("img", pattern="*.png", full.names=TRUE)
filenames2 <- as.vector(filenames) # this is the vector of file names
#make json of validation triplets
# Generate all combinations of 3 from the vector
all_combinations <- combn(filenames2, 3)
filenames2
setwd("~/Documents/GitHub/color_triplets")
#make json of hex code file names
filenames<- list.files("img", pattern="*.png", full.names=TRUE)
filenames2 <- as.vector(filenames) # this is the vector of file names
#make json of validation triplets
# Generate all combinations of 3 from the vector
all_combinations <- combn(filenames2, 3)
# Randomly sample 25 sets of combinations
set.seed(123)  # Set seed for reproducibility
sampled_sets <- all_combinations[, sample(ncol(all_combinations), 25)]
# View the sampled sets
print(sampled_sets)
View(sampled_sets)
install.packages("jsonlite")
library("jsonlite")
# Convert the sampled_sets matrix to a list of lists
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
as.list(sampled_sets[, i])
})
# Convert the list to JSON
json_output <- toJSON(sets_list, pretty = TRUE)
View(json_output)
# View the JSON output
cat(json_output)
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Convert the list to JSON
json_output <- toJSON(sets_list, pretty = TRUE)
write(filenames_json, "validation_random.json")
# Convert the list to JSON
json_output <- toJSON(sets_list, pretty = TRUE)
write(json_output, "validation_random.json")
# Convert the list to JSON
json_output <- toJSON(sets_list, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
# Format as an object without the outer array
json_output <- gsub("^\\[", "", json_output)
json_output <- gsub("\\]$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(sets_list, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[", "", sets_list)
json_output <- gsub("\\]$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(sets_list, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
# Format as an object without the outer array
json_output <- gsub("^\\[\\n|\\]\\s*$", "", sets_list)
# Convert the list to JSON
json_output <- toJSON(sets_list, auto_unbox=TRUE, pretty = TRUE)
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(head = paste("head:", triplet[1]), second = paste("choice_1:", triplet[2]), third = paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[", "", sets_list)
json_output <- gsub("\\]$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[", "", sets_list)
json_output <- gsub("\\]$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
# Format as an object without the outer array
json_output <- gsub("^\\[\\n|\\]\\s*$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[\\n|\\]\\s*$", "", json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[\\n|\\]\\s*$", "",sets_list)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
# Format as an object without the outer array
json_output <- gsub("^\[\n|\]\s*$", "",sets_list)
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\]\s*$", "",sets_list)
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\\]\s*$", "",sets_list)
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\\]\\s*$", "",sets_list)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
json_output <- gsub("list(\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
json_output <- gsub("list(\\", "",json_output)
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\\]\\s*$", "",sets_list)
json_output <- gsub("list(", "",json_output)
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\\]\\s*$", "",sets_list)
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("^\\[\n|\\]\\s*$", "",sets_list)
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
json_output <- gsub("\\", "",json_output)
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
json_output <- gsub("list(\\", "",json_output)
json_output <- gsub("list(\\\\", "",json_output)
json_output <- gsub("list\\(", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
json_output <- gsub("list\\(", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
json_output <- gsub("list(", "",json_output, fixed=TRUE)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
#json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
json_output <- gsub("list(", "",json_output, fixed=TRUE)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
#json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
json_output <- gsub("list(", "",json_output, fixed=TRUE)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
sets_list <- lapply(1:ncol(sampled_sets), function(i) {
triplet <- sampled_sets[, i]
list(paste("head:", triplet[1]), paste("choice_1:", triplet[2]), paste("choice_2:",triplet[3]))
})
# Format as an object without the outer array
json_output <- gsub("\\\\", "",sets_list)
#json_output <- gsub("^\\[\n|\\]\\s*$", "",json_output)
json_output <- gsub("list(", "",json_output, fixed=TRUE)
json_output <- gsub("\\\\", "",json_output)
# Convert the list to JSON
json_output <- toJSON(json_output, auto_unbox=TRUE, pretty = TRUE)
# View the JSON output
#cat(json_output)
write(json_output, "validation_random.json")
